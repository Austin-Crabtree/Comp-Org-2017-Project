$date
	Sat Apr 22 15:24:48 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module EX_tb $end
$scope module test $end
$var wire 1 ! Clk $end
$var wire 32 " DataAIn [31:0] $end
$var wire 32 # DataBIn [31:0] $end
$var wire 4 $ EXControlIn [3:0] $end
$var wire 3 % FunctIn [2:0] $end
$var wire 2 & MEMControlIn [1:0] $end
$var wire 5 ' RdIn [4:0] $end
$var wire 5 ( RtIn [4:0] $end
$var wire 32 ) SEIn [31:0] $end
$var wire 2 * WBControlIn [1:0] $end
$var wire 1 + zero $end
$var wire 1 , set $end
$var wire 32 - result [31:0] $end
$var wire 1 . overflow $end
$var reg 32 / DataB [31:0] $end
$var reg 32 0 DataOut [31:0] $end
$var reg 2 1 MEMControlOut [1:0] $end
$var reg 5 2 RdOut [4:0] $end
$var reg 32 3 ResultOut [31:0] $end
$var reg 2 4 WBControlOut [1:0] $end
$scope module ALU $end
$var wire 32 5 a [31:0] $end
$var wire 32 6 b [31:0] $end
$var wire 1 7 null_wire $end
$var wire 3 8 op [2:0] $end
$var wire 1 . overflow $end
$var wire 1 9 overflow0 $end
$var wire 1 : overflow1 $end
$var wire 1 , set $end
$var wire 1 + zero $end
$var wire 1 ; zero1 $end
$var wire 1 < zero0 $end
$var wire 1 = setwire $end
$var wire 32 > result [31:0] $end
$var wire 1 ? cin1 $end
$scope module alu0 $end
$var wire 1 7 G $end
$var wire 1 7 P $end
$var wire 16 @ a [15:0] $end
$var wire 16 A b [15:0] $end
$var wire 1 B cin $end
$var wire 1 C null_cout $end
$var wire 1 D null_set $end
$var wire 3 E op [2:0] $end
$var wire 1 9 overflow $end
$var wire 1 7 set $end
$var wire 1 < zero $end
$var wire 4 F zeros [3:0] $end
$var wire 16 G result [15:0] $end
$var wire 1 H p3 $end
$var wire 1 I p2 $end
$var wire 1 J p1 $end
$var wire 1 K p0 $end
$var wire 1 = less $end
$var wire 1 L g3 $end
$var wire 1 M g2 $end
$var wire 1 N g1 $end
$var wire 1 O g0 $end
$var wire 1 ? cout $end
$var wire 1 P C3 $end
$var wire 1 Q C2 $end
$var wire 1 R C1 $end
$scope module CLA1 $end
$var wire 1 R C1 $end
$var wire 1 Q C2 $end
$var wire 1 P C3 $end
$var wire 1 ? C4 $end
$var wire 1 7 G $end
$var wire 1 7 P $end
$var wire 1 B cin $end
$var wire 1 H p3 $end
$var wire 1 I p2 $end
$var wire 1 J p1 $end
$var wire 1 K p0 $end
$var wire 1 L g3 $end
$var wire 1 M g2 $end
$var wire 1 N g1 $end
$var wire 1 O g0 $end
$upscope $end
$scope module alu_0 $end
$var wire 4 S a [3:0] $end
$var wire 4 T b [3:0] $end
$var wire 1 B cin $end
$var wire 1 C cout $end
$var wire 3 U op [2:0] $end
$var wire 1 9 overflow $end
$var wire 1 D set $end
$var wire 1 V zero $end
$var wire 1 W set3 $end
$var wire 1 X set2 $end
$var wire 1 Y set1 $end
$var wire 1 Z set0 $end
$var wire 4 [ result [3:0] $end
$var wire 1 \ p3 $end
$var wire 1 ] p2 $end
$var wire 1 ^ p1 $end
$var wire 1 _ p0 $end
$var wire 1 = less $end
$var wire 1 ` g3 $end
$var wire 1 a g2 $end
$var wire 1 b g1 $end
$var wire 1 c g0 $end
$var wire 1 d cout3 $end
$var wire 1 e cout2 $end
$var wire 1 f cout1 $end
$var wire 1 g cout0 $end
$var wire 1 K P $end
$var wire 1 O G $end
$var wire 1 h C3 $end
$var wire 1 i C2 $end
$var wire 1 j C1 $end
$scope module alu1bit_0 $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 B cin $end
$var wire 1 c g $end
$var wire 3 m op [2:0] $end
$var wire 1 _ p $end
$var wire 1 Z set $end
$var wire 1 n result $end
$var wire 1 = less $end
$var wire 1 g cout $end
$var wire 1 o bmux $end
$scope module bmux2to1 $end
$var wire 1 l a $end
$var wire 1 p b $end
$var wire 1 q s $end
$var wire 1 o out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 c a $end
$var wire 1 _ b $end
$var wire 1 r s0 $end
$var wire 1 s s1 $end
$var wire 1 n out $end
$var wire 1 = d $end
$var wire 1 Z c $end
$upscope $end
$scope module sumadder $end
$var wire 1 k a $end
$var wire 1 o b $end
$var wire 1 B cin $end
$var wire 1 g cout $end
$var wire 1 Z sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 b g $end
$var wire 1 v less $end
$var wire 3 w op [2:0] $end
$var wire 1 ^ p $end
$var wire 1 Y set $end
$var wire 1 x result $end
$var wire 1 f cout $end
$var wire 1 j cin $end
$var wire 1 y bmux $end
$scope module bmux2to1 $end
$var wire 1 u a $end
$var wire 1 z b $end
$var wire 1 { s $end
$var wire 1 y out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 b a $end
$var wire 1 ^ b $end
$var wire 1 v d $end
$var wire 1 | s0 $end
$var wire 1 } s1 $end
$var wire 1 x out $end
$var wire 1 Y c $end
$upscope $end
$scope module sumadder $end
$var wire 1 t a $end
$var wire 1 y b $end
$var wire 1 f cout $end
$var wire 1 Y sum $end
$var wire 1 j cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 a g $end
$var wire 1 "" less $end
$var wire 3 #" op [2:0] $end
$var wire 1 ] p $end
$var wire 1 X set $end
$var wire 1 $" result $end
$var wire 1 e cout $end
$var wire 1 i cin $end
$var wire 1 %" bmux $end
$scope module bmux2to1 $end
$var wire 1 !" a $end
$var wire 1 &" b $end
$var wire 1 '" s $end
$var wire 1 %" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 a a $end
$var wire 1 ] b $end
$var wire 1 "" d $end
$var wire 1 (" s0 $end
$var wire 1 )" s1 $end
$var wire 1 $" out $end
$var wire 1 X c $end
$upscope $end
$scope module sumadder $end
$var wire 1 ~ a $end
$var wire 1 %" b $end
$var wire 1 e cout $end
$var wire 1 X sum $end
$var wire 1 i cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 *" a $end
$var wire 1 +" b $end
$var wire 1 ` g $end
$var wire 1 ," less $end
$var wire 3 -" op [2:0] $end
$var wire 1 \ p $end
$var wire 1 W set $end
$var wire 1 ." result $end
$var wire 1 d cout $end
$var wire 1 h cin $end
$var wire 1 /" bmux $end
$scope module bmux2to1 $end
$var wire 1 +" a $end
$var wire 1 0" b $end
$var wire 1 1" s $end
$var wire 1 /" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 ` a $end
$var wire 1 \ b $end
$var wire 1 ," d $end
$var wire 1 2" s0 $end
$var wire 1 3" s1 $end
$var wire 1 ." out $end
$var wire 1 W c $end
$upscope $end
$scope module sumadder $end
$var wire 1 *" a $end
$var wire 1 /" b $end
$var wire 1 d cout $end
$var wire 1 W sum $end
$var wire 1 h cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 j C1 $end
$var wire 1 i C2 $end
$var wire 1 h C3 $end
$var wire 1 C C4 $end
$var wire 1 O G $end
$var wire 1 K P $end
$var wire 1 4" cin $end
$var wire 1 c g0 $end
$var wire 1 b g1 $end
$var wire 1 a g2 $end
$var wire 1 ` g3 $end
$var wire 1 _ p0 $end
$var wire 1 ^ p1 $end
$var wire 1 ] p2 $end
$var wire 1 \ p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 h cin $end
$var wire 1 C cout $end
$var wire 1 9 v $end
$upscope $end
$upscope $end
$scope module alu_1 $end
$var wire 4 5" a [3:0] $end
$var wire 4 6" b [3:0] $end
$var wire 1 R cin $end
$var wire 1 C cout $end
$var wire 1 7" less $end
$var wire 3 8" op [2:0] $end
$var wire 1 9 overflow $end
$var wire 1 D set $end
$var wire 1 9" zero $end
$var wire 1 :" set3 $end
$var wire 1 ;" set2 $end
$var wire 1 <" set1 $end
$var wire 1 =" set0 $end
$var wire 4 >" result [3:0] $end
$var wire 1 ?" p3 $end
$var wire 1 @" p2 $end
$var wire 1 A" p1 $end
$var wire 1 B" p0 $end
$var wire 1 C" g3 $end
$var wire 1 D" g2 $end
$var wire 1 E" g1 $end
$var wire 1 F" g0 $end
$var wire 1 G" cout3 $end
$var wire 1 H" cout2 $end
$var wire 1 I" cout1 $end
$var wire 1 J" cout0 $end
$var wire 1 J P $end
$var wire 1 N G $end
$var wire 1 K" C3 $end
$var wire 1 L" C2 $end
$var wire 1 M" C1 $end
$scope module alu1bit_0 $end
$var wire 1 N" a $end
$var wire 1 O" b $end
$var wire 1 R cin $end
$var wire 1 F" g $end
$var wire 1 7" less $end
$var wire 3 P" op [2:0] $end
$var wire 1 B" p $end
$var wire 1 =" set $end
$var wire 1 Q" result $end
$var wire 1 J" cout $end
$var wire 1 R" bmux $end
$scope module bmux2to1 $end
$var wire 1 O" a $end
$var wire 1 S" b $end
$var wire 1 T" s $end
$var wire 1 R" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 F" a $end
$var wire 1 B" b $end
$var wire 1 7" d $end
$var wire 1 U" s0 $end
$var wire 1 V" s1 $end
$var wire 1 Q" out $end
$var wire 1 =" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 N" a $end
$var wire 1 R" b $end
$var wire 1 R cin $end
$var wire 1 J" cout $end
$var wire 1 =" sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 W" a $end
$var wire 1 X" b $end
$var wire 1 E" g $end
$var wire 1 Y" less $end
$var wire 3 Z" op [2:0] $end
$var wire 1 A" p $end
$var wire 1 <" set $end
$var wire 1 [" result $end
$var wire 1 I" cout $end
$var wire 1 M" cin $end
$var wire 1 \" bmux $end
$scope module bmux2to1 $end
$var wire 1 X" a $end
$var wire 1 ]" b $end
$var wire 1 ^" s $end
$var wire 1 \" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 E" a $end
$var wire 1 A" b $end
$var wire 1 Y" d $end
$var wire 1 _" s0 $end
$var wire 1 `" s1 $end
$var wire 1 [" out $end
$var wire 1 <" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 W" a $end
$var wire 1 \" b $end
$var wire 1 I" cout $end
$var wire 1 <" sum $end
$var wire 1 M" cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 a" a $end
$var wire 1 b" b $end
$var wire 1 D" g $end
$var wire 1 c" less $end
$var wire 3 d" op [2:0] $end
$var wire 1 @" p $end
$var wire 1 ;" set $end
$var wire 1 e" result $end
$var wire 1 H" cout $end
$var wire 1 L" cin $end
$var wire 1 f" bmux $end
$scope module bmux2to1 $end
$var wire 1 b" a $end
$var wire 1 g" b $end
$var wire 1 h" s $end
$var wire 1 f" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 D" a $end
$var wire 1 @" b $end
$var wire 1 c" d $end
$var wire 1 i" s0 $end
$var wire 1 j" s1 $end
$var wire 1 e" out $end
$var wire 1 ;" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 a" a $end
$var wire 1 f" b $end
$var wire 1 H" cout $end
$var wire 1 ;" sum $end
$var wire 1 L" cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 k" a $end
$var wire 1 l" b $end
$var wire 1 C" g $end
$var wire 1 m" less $end
$var wire 3 n" op [2:0] $end
$var wire 1 ?" p $end
$var wire 1 :" set $end
$var wire 1 o" result $end
$var wire 1 G" cout $end
$var wire 1 K" cin $end
$var wire 1 p" bmux $end
$scope module bmux2to1 $end
$var wire 1 l" a $end
$var wire 1 q" b $end
$var wire 1 r" s $end
$var wire 1 p" out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 C" a $end
$var wire 1 ?" b $end
$var wire 1 m" d $end
$var wire 1 s" s0 $end
$var wire 1 t" s1 $end
$var wire 1 o" out $end
$var wire 1 :" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 k" a $end
$var wire 1 p" b $end
$var wire 1 G" cout $end
$var wire 1 :" sum $end
$var wire 1 K" cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 M" C1 $end
$var wire 1 L" C2 $end
$var wire 1 K" C3 $end
$var wire 1 C C4 $end
$var wire 1 N G $end
$var wire 1 J P $end
$var wire 1 u" cin $end
$var wire 1 F" g0 $end
$var wire 1 E" g1 $end
$var wire 1 D" g2 $end
$var wire 1 C" g3 $end
$var wire 1 B" p0 $end
$var wire 1 A" p1 $end
$var wire 1 @" p2 $end
$var wire 1 ?" p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 K" cin $end
$var wire 1 C cout $end
$var wire 1 9 v $end
$upscope $end
$upscope $end
$scope module alu_2 $end
$var wire 4 v" a [3:0] $end
$var wire 4 w" b [3:0] $end
$var wire 1 Q cin $end
$var wire 1 C cout $end
$var wire 1 x" less $end
$var wire 3 y" op [2:0] $end
$var wire 1 9 overflow $end
$var wire 1 D set $end
$var wire 1 z" zero $end
$var wire 1 {" set3 $end
$var wire 1 |" set2 $end
$var wire 1 }" set1 $end
$var wire 1 ~" set0 $end
$var wire 4 !# result [3:0] $end
$var wire 1 "# p3 $end
$var wire 1 ## p2 $end
$var wire 1 $# p1 $end
$var wire 1 %# p0 $end
$var wire 1 &# g3 $end
$var wire 1 '# g2 $end
$var wire 1 (# g1 $end
$var wire 1 )# g0 $end
$var wire 1 *# cout3 $end
$var wire 1 +# cout2 $end
$var wire 1 ,# cout1 $end
$var wire 1 -# cout0 $end
$var wire 1 I P $end
$var wire 1 M G $end
$var wire 1 .# C3 $end
$var wire 1 /# C2 $end
$var wire 1 0# C1 $end
$scope module alu1bit_0 $end
$var wire 1 1# a $end
$var wire 1 2# b $end
$var wire 1 Q cin $end
$var wire 1 )# g $end
$var wire 1 x" less $end
$var wire 3 3# op [2:0] $end
$var wire 1 %# p $end
$var wire 1 ~" set $end
$var wire 1 4# result $end
$var wire 1 -# cout $end
$var wire 1 5# bmux $end
$scope module bmux2to1 $end
$var wire 1 2# a $end
$var wire 1 6# b $end
$var wire 1 7# s $end
$var wire 1 5# out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 )# a $end
$var wire 1 %# b $end
$var wire 1 x" d $end
$var wire 1 8# s0 $end
$var wire 1 9# s1 $end
$var wire 1 4# out $end
$var wire 1 ~" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 1# a $end
$var wire 1 5# b $end
$var wire 1 Q cin $end
$var wire 1 -# cout $end
$var wire 1 ~" sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 (# g $end
$var wire 1 <# less $end
$var wire 3 =# op [2:0] $end
$var wire 1 $# p $end
$var wire 1 }" set $end
$var wire 1 ># result $end
$var wire 1 ,# cout $end
$var wire 1 0# cin $end
$var wire 1 ?# bmux $end
$scope module bmux2to1 $end
$var wire 1 ;# a $end
$var wire 1 @# b $end
$var wire 1 A# s $end
$var wire 1 ?# out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 (# a $end
$var wire 1 $# b $end
$var wire 1 <# d $end
$var wire 1 B# s0 $end
$var wire 1 C# s1 $end
$var wire 1 ># out $end
$var wire 1 }" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 :# a $end
$var wire 1 ?# b $end
$var wire 1 ,# cout $end
$var wire 1 }" sum $end
$var wire 1 0# cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 D# a $end
$var wire 1 E# b $end
$var wire 1 '# g $end
$var wire 1 F# less $end
$var wire 3 G# op [2:0] $end
$var wire 1 ## p $end
$var wire 1 |" set $end
$var wire 1 H# result $end
$var wire 1 +# cout $end
$var wire 1 /# cin $end
$var wire 1 I# bmux $end
$scope module bmux2to1 $end
$var wire 1 E# a $end
$var wire 1 J# b $end
$var wire 1 K# s $end
$var wire 1 I# out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 '# a $end
$var wire 1 ## b $end
$var wire 1 F# d $end
$var wire 1 L# s0 $end
$var wire 1 M# s1 $end
$var wire 1 H# out $end
$var wire 1 |" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 D# a $end
$var wire 1 I# b $end
$var wire 1 +# cout $end
$var wire 1 |" sum $end
$var wire 1 /# cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 N# a $end
$var wire 1 O# b $end
$var wire 1 &# g $end
$var wire 1 P# less $end
$var wire 3 Q# op [2:0] $end
$var wire 1 "# p $end
$var wire 1 {" set $end
$var wire 1 R# result $end
$var wire 1 *# cout $end
$var wire 1 .# cin $end
$var wire 1 S# bmux $end
$scope module bmux2to1 $end
$var wire 1 O# a $end
$var wire 1 T# b $end
$var wire 1 U# s $end
$var wire 1 S# out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 &# a $end
$var wire 1 "# b $end
$var wire 1 P# d $end
$var wire 1 V# s0 $end
$var wire 1 W# s1 $end
$var wire 1 R# out $end
$var wire 1 {" c $end
$upscope $end
$scope module sumadder $end
$var wire 1 N# a $end
$var wire 1 S# b $end
$var wire 1 *# cout $end
$var wire 1 {" sum $end
$var wire 1 .# cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 0# C1 $end
$var wire 1 /# C2 $end
$var wire 1 .# C3 $end
$var wire 1 C C4 $end
$var wire 1 M G $end
$var wire 1 I P $end
$var wire 1 X# cin $end
$var wire 1 )# g0 $end
$var wire 1 (# g1 $end
$var wire 1 '# g2 $end
$var wire 1 &# g3 $end
$var wire 1 %# p0 $end
$var wire 1 $# p1 $end
$var wire 1 ## p2 $end
$var wire 1 "# p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 .# cin $end
$var wire 1 C cout $end
$var wire 1 9 v $end
$upscope $end
$upscope $end
$scope module alu_3 $end
$var wire 4 Y# a [3:0] $end
$var wire 4 Z# b [3:0] $end
$var wire 1 P cin $end
$var wire 1 C cout $end
$var wire 1 [# less $end
$var wire 3 \# op [2:0] $end
$var wire 1 9 overflow $end
$var wire 1 7 set $end
$var wire 1 ]# zero $end
$var wire 1 ^# set3 $end
$var wire 1 _# set2 $end
$var wire 1 `# set1 $end
$var wire 1 a# set0 $end
$var wire 4 b# result [3:0] $end
$var wire 1 c# p3 $end
$var wire 1 d# p2 $end
$var wire 1 e# p1 $end
$var wire 1 f# p0 $end
$var wire 1 g# g3 $end
$var wire 1 h# g2 $end
$var wire 1 i# g1 $end
$var wire 1 j# g0 $end
$var wire 1 k# cout3 $end
$var wire 1 l# cout2 $end
$var wire 1 m# cout1 $end
$var wire 1 n# cout0 $end
$var wire 1 H P $end
$var wire 1 L G $end
$var wire 1 o# C3 $end
$var wire 1 p# C2 $end
$var wire 1 q# C1 $end
$scope module alu1bit_0 $end
$var wire 1 r# a $end
$var wire 1 s# b $end
$var wire 1 P cin $end
$var wire 1 j# g $end
$var wire 1 [# less $end
$var wire 3 t# op [2:0] $end
$var wire 1 f# p $end
$var wire 1 a# set $end
$var wire 1 u# result $end
$var wire 1 n# cout $end
$var wire 1 v# bmux $end
$scope module bmux2to1 $end
$var wire 1 s# a $end
$var wire 1 w# b $end
$var wire 1 x# s $end
$var wire 1 v# out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 j# a $end
$var wire 1 f# b $end
$var wire 1 [# d $end
$var wire 1 y# s0 $end
$var wire 1 z# s1 $end
$var wire 1 u# out $end
$var wire 1 a# c $end
$upscope $end
$scope module sumadder $end
$var wire 1 r# a $end
$var wire 1 v# b $end
$var wire 1 P cin $end
$var wire 1 n# cout $end
$var wire 1 a# sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 {# a $end
$var wire 1 |# b $end
$var wire 1 i# g $end
$var wire 1 }# less $end
$var wire 3 ~# op [2:0] $end
$var wire 1 e# p $end
$var wire 1 `# set $end
$var wire 1 !$ result $end
$var wire 1 m# cout $end
$var wire 1 q# cin $end
$var wire 1 "$ bmux $end
$scope module bmux2to1 $end
$var wire 1 |# a $end
$var wire 1 #$ b $end
$var wire 1 $$ s $end
$var wire 1 "$ out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 i# a $end
$var wire 1 e# b $end
$var wire 1 }# d $end
$var wire 1 %$ s0 $end
$var wire 1 &$ s1 $end
$var wire 1 !$ out $end
$var wire 1 `# c $end
$upscope $end
$scope module sumadder $end
$var wire 1 {# a $end
$var wire 1 "$ b $end
$var wire 1 m# cout $end
$var wire 1 `# sum $end
$var wire 1 q# cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 '$ a $end
$var wire 1 ($ b $end
$var wire 1 h# g $end
$var wire 1 )$ less $end
$var wire 3 *$ op [2:0] $end
$var wire 1 d# p $end
$var wire 1 _# set $end
$var wire 1 +$ result $end
$var wire 1 l# cout $end
$var wire 1 p# cin $end
$var wire 1 ,$ bmux $end
$scope module bmux2to1 $end
$var wire 1 ($ a $end
$var wire 1 -$ b $end
$var wire 1 .$ s $end
$var wire 1 ,$ out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 h# a $end
$var wire 1 d# b $end
$var wire 1 )$ d $end
$var wire 1 /$ s0 $end
$var wire 1 0$ s1 $end
$var wire 1 +$ out $end
$var wire 1 _# c $end
$upscope $end
$scope module sumadder $end
$var wire 1 '$ a $end
$var wire 1 ,$ b $end
$var wire 1 l# cout $end
$var wire 1 _# sum $end
$var wire 1 p# cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 1$ a $end
$var wire 1 2$ b $end
$var wire 1 g# g $end
$var wire 1 3$ less $end
$var wire 3 4$ op [2:0] $end
$var wire 1 c# p $end
$var wire 1 ^# set $end
$var wire 1 5$ result $end
$var wire 1 k# cout $end
$var wire 1 o# cin $end
$var wire 1 6$ bmux $end
$scope module bmux2to1 $end
$var wire 1 2$ a $end
$var wire 1 7$ b $end
$var wire 1 8$ s $end
$var wire 1 6$ out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 g# a $end
$var wire 1 c# b $end
$var wire 1 3$ d $end
$var wire 1 9$ s0 $end
$var wire 1 :$ s1 $end
$var wire 1 5$ out $end
$var wire 1 ^# c $end
$upscope $end
$scope module sumadder $end
$var wire 1 1$ a $end
$var wire 1 6$ b $end
$var wire 1 k# cout $end
$var wire 1 ^# sum $end
$var wire 1 o# cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 q# C1 $end
$var wire 1 p# C2 $end
$var wire 1 o# C3 $end
$var wire 1 C C4 $end
$var wire 1 L G $end
$var wire 1 H P $end
$var wire 1 ;$ cin $end
$var wire 1 j# g0 $end
$var wire 1 i# g1 $end
$var wire 1 h# g2 $end
$var wire 1 g# g3 $end
$var wire 1 f# p0 $end
$var wire 1 e# p1 $end
$var wire 1 d# p2 $end
$var wire 1 c# p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 o# cin $end
$var wire 1 C cout $end
$var wire 1 9 v $end
$upscope $end
$upscope $end
$upscope $end
$scope module alu1 $end
$var wire 1 7 G $end
$var wire 1 7 P $end
$var wire 16 <$ a [15:0] $end
$var wire 16 =$ b [15:0] $end
$var wire 1 ? cin $end
$var wire 1 7 cout $end
$var wire 1 >$ less $end
$var wire 1 ?$ null_cout $end
$var wire 1 @$ null_set $end
$var wire 3 A$ op [2:0] $end
$var wire 1 : overflow $end
$var wire 1 ; zero $end
$var wire 4 B$ zeros [3:0] $end
$var wire 1 = set $end
$var wire 16 C$ result [15:0] $end
$var wire 1 D$ p3 $end
$var wire 1 E$ p2 $end
$var wire 1 F$ p1 $end
$var wire 1 G$ p0 $end
$var wire 1 H$ g3 $end
$var wire 1 I$ g2 $end
$var wire 1 J$ g1 $end
$var wire 1 K$ g0 $end
$var wire 1 L$ C3 $end
$var wire 1 M$ C2 $end
$var wire 1 N$ C1 $end
$scope module CLA1 $end
$var wire 1 N$ C1 $end
$var wire 1 M$ C2 $end
$var wire 1 L$ C3 $end
$var wire 1 7 C4 $end
$var wire 1 7 G $end
$var wire 1 7 P $end
$var wire 1 ? cin $end
$var wire 1 D$ p3 $end
$var wire 1 E$ p2 $end
$var wire 1 F$ p1 $end
$var wire 1 G$ p0 $end
$var wire 1 H$ g3 $end
$var wire 1 I$ g2 $end
$var wire 1 J$ g1 $end
$var wire 1 K$ g0 $end
$upscope $end
$scope module alu_0 $end
$var wire 4 O$ a [3:0] $end
$var wire 4 P$ b [3:0] $end
$var wire 1 ? cin $end
$var wire 1 ?$ cout $end
$var wire 1 >$ less $end
$var wire 3 Q$ op [2:0] $end
$var wire 1 : overflow $end
$var wire 1 @$ set $end
$var wire 1 R$ zero $end
$var wire 1 S$ set3 $end
$var wire 1 T$ set2 $end
$var wire 1 U$ set1 $end
$var wire 1 V$ set0 $end
$var wire 4 W$ result [3:0] $end
$var wire 1 X$ p3 $end
$var wire 1 Y$ p2 $end
$var wire 1 Z$ p1 $end
$var wire 1 [$ p0 $end
$var wire 1 \$ g3 $end
$var wire 1 ]$ g2 $end
$var wire 1 ^$ g1 $end
$var wire 1 _$ g0 $end
$var wire 1 `$ cout3 $end
$var wire 1 a$ cout2 $end
$var wire 1 b$ cout1 $end
$var wire 1 c$ cout0 $end
$var wire 1 G$ P $end
$var wire 1 K$ G $end
$var wire 1 d$ C3 $end
$var wire 1 e$ C2 $end
$var wire 1 f$ C1 $end
$scope module alu1bit_0 $end
$var wire 1 g$ a $end
$var wire 1 h$ b $end
$var wire 1 ? cin $end
$var wire 1 _$ g $end
$var wire 1 >$ less $end
$var wire 3 i$ op [2:0] $end
$var wire 1 [$ p $end
$var wire 1 V$ set $end
$var wire 1 j$ result $end
$var wire 1 c$ cout $end
$var wire 1 k$ bmux $end
$scope module bmux2to1 $end
$var wire 1 h$ a $end
$var wire 1 l$ b $end
$var wire 1 m$ s $end
$var wire 1 k$ out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 _$ a $end
$var wire 1 [$ b $end
$var wire 1 >$ d $end
$var wire 1 n$ s0 $end
$var wire 1 o$ s1 $end
$var wire 1 j$ out $end
$var wire 1 V$ c $end
$upscope $end
$scope module sumadder $end
$var wire 1 g$ a $end
$var wire 1 k$ b $end
$var wire 1 ? cin $end
$var wire 1 c$ cout $end
$var wire 1 V$ sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 p$ a $end
$var wire 1 q$ b $end
$var wire 1 ^$ g $end
$var wire 1 r$ less $end
$var wire 3 s$ op [2:0] $end
$var wire 1 Z$ p $end
$var wire 1 U$ set $end
$var wire 1 t$ result $end
$var wire 1 b$ cout $end
$var wire 1 f$ cin $end
$var wire 1 u$ bmux $end
$scope module bmux2to1 $end
$var wire 1 q$ a $end
$var wire 1 v$ b $end
$var wire 1 w$ s $end
$var wire 1 u$ out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 ^$ a $end
$var wire 1 Z$ b $end
$var wire 1 r$ d $end
$var wire 1 x$ s0 $end
$var wire 1 y$ s1 $end
$var wire 1 t$ out $end
$var wire 1 U$ c $end
$upscope $end
$scope module sumadder $end
$var wire 1 p$ a $end
$var wire 1 u$ b $end
$var wire 1 b$ cout $end
$var wire 1 U$ sum $end
$var wire 1 f$ cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 z$ a $end
$var wire 1 {$ b $end
$var wire 1 ]$ g $end
$var wire 1 |$ less $end
$var wire 3 }$ op [2:0] $end
$var wire 1 Y$ p $end
$var wire 1 T$ set $end
$var wire 1 ~$ result $end
$var wire 1 a$ cout $end
$var wire 1 e$ cin $end
$var wire 1 !% bmux $end
$scope module bmux2to1 $end
$var wire 1 {$ a $end
$var wire 1 "% b $end
$var wire 1 #% s $end
$var wire 1 !% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 ]$ a $end
$var wire 1 Y$ b $end
$var wire 1 |$ d $end
$var wire 1 $% s0 $end
$var wire 1 %% s1 $end
$var wire 1 ~$ out $end
$var wire 1 T$ c $end
$upscope $end
$scope module sumadder $end
$var wire 1 z$ a $end
$var wire 1 !% b $end
$var wire 1 a$ cout $end
$var wire 1 T$ sum $end
$var wire 1 e$ cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 &% a $end
$var wire 1 '% b $end
$var wire 1 \$ g $end
$var wire 1 (% less $end
$var wire 3 )% op [2:0] $end
$var wire 1 X$ p $end
$var wire 1 S$ set $end
$var wire 1 *% result $end
$var wire 1 `$ cout $end
$var wire 1 d$ cin $end
$var wire 1 +% bmux $end
$scope module bmux2to1 $end
$var wire 1 '% a $end
$var wire 1 ,% b $end
$var wire 1 -% s $end
$var wire 1 +% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 \$ a $end
$var wire 1 X$ b $end
$var wire 1 (% d $end
$var wire 1 .% s0 $end
$var wire 1 /% s1 $end
$var wire 1 *% out $end
$var wire 1 S$ c $end
$upscope $end
$scope module sumadder $end
$var wire 1 &% a $end
$var wire 1 +% b $end
$var wire 1 `$ cout $end
$var wire 1 S$ sum $end
$var wire 1 d$ cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 f$ C1 $end
$var wire 1 e$ C2 $end
$var wire 1 d$ C3 $end
$var wire 1 ?$ C4 $end
$var wire 1 K$ G $end
$var wire 1 G$ P $end
$var wire 1 0% cin $end
$var wire 1 _$ g0 $end
$var wire 1 ^$ g1 $end
$var wire 1 ]$ g2 $end
$var wire 1 \$ g3 $end
$var wire 1 [$ p0 $end
$var wire 1 Z$ p1 $end
$var wire 1 Y$ p2 $end
$var wire 1 X$ p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 d$ cin $end
$var wire 1 ?$ cout $end
$var wire 1 : v $end
$upscope $end
$upscope $end
$scope module alu_1 $end
$var wire 4 1% a [3:0] $end
$var wire 4 2% b [3:0] $end
$var wire 1 N$ cin $end
$var wire 1 ?$ cout $end
$var wire 1 3% less $end
$var wire 3 4% op [2:0] $end
$var wire 1 : overflow $end
$var wire 1 @$ set $end
$var wire 1 5% zero $end
$var wire 1 6% set3 $end
$var wire 1 7% set2 $end
$var wire 1 8% set1 $end
$var wire 1 9% set0 $end
$var wire 4 :% result [3:0] $end
$var wire 1 ;% p3 $end
$var wire 1 <% p2 $end
$var wire 1 =% p1 $end
$var wire 1 >% p0 $end
$var wire 1 ?% g3 $end
$var wire 1 @% g2 $end
$var wire 1 A% g1 $end
$var wire 1 B% g0 $end
$var wire 1 C% cout3 $end
$var wire 1 D% cout2 $end
$var wire 1 E% cout1 $end
$var wire 1 F% cout0 $end
$var wire 1 F$ P $end
$var wire 1 J$ G $end
$var wire 1 G% C3 $end
$var wire 1 H% C2 $end
$var wire 1 I% C1 $end
$scope module alu1bit_0 $end
$var wire 1 J% a $end
$var wire 1 K% b $end
$var wire 1 N$ cin $end
$var wire 1 B% g $end
$var wire 1 3% less $end
$var wire 3 L% op [2:0] $end
$var wire 1 >% p $end
$var wire 1 9% set $end
$var wire 1 M% result $end
$var wire 1 F% cout $end
$var wire 1 N% bmux $end
$scope module bmux2to1 $end
$var wire 1 K% a $end
$var wire 1 O% b $end
$var wire 1 P% s $end
$var wire 1 N% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 B% a $end
$var wire 1 >% b $end
$var wire 1 3% d $end
$var wire 1 Q% s0 $end
$var wire 1 R% s1 $end
$var wire 1 M% out $end
$var wire 1 9% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 J% a $end
$var wire 1 N% b $end
$var wire 1 N$ cin $end
$var wire 1 F% cout $end
$var wire 1 9% sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 S% a $end
$var wire 1 T% b $end
$var wire 1 A% g $end
$var wire 1 U% less $end
$var wire 3 V% op [2:0] $end
$var wire 1 =% p $end
$var wire 1 8% set $end
$var wire 1 W% result $end
$var wire 1 E% cout $end
$var wire 1 I% cin $end
$var wire 1 X% bmux $end
$scope module bmux2to1 $end
$var wire 1 T% a $end
$var wire 1 Y% b $end
$var wire 1 Z% s $end
$var wire 1 X% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 A% a $end
$var wire 1 =% b $end
$var wire 1 U% d $end
$var wire 1 [% s0 $end
$var wire 1 \% s1 $end
$var wire 1 W% out $end
$var wire 1 8% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 S% a $end
$var wire 1 X% b $end
$var wire 1 E% cout $end
$var wire 1 8% sum $end
$var wire 1 I% cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var wire 1 @% g $end
$var wire 1 _% less $end
$var wire 3 `% op [2:0] $end
$var wire 1 <% p $end
$var wire 1 7% set $end
$var wire 1 a% result $end
$var wire 1 D% cout $end
$var wire 1 H% cin $end
$var wire 1 b% bmux $end
$scope module bmux2to1 $end
$var wire 1 ^% a $end
$var wire 1 c% b $end
$var wire 1 d% s $end
$var wire 1 b% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 @% a $end
$var wire 1 <% b $end
$var wire 1 _% d $end
$var wire 1 e% s0 $end
$var wire 1 f% s1 $end
$var wire 1 a% out $end
$var wire 1 7% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 ]% a $end
$var wire 1 b% b $end
$var wire 1 D% cout $end
$var wire 1 7% sum $end
$var wire 1 H% cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 g% a $end
$var wire 1 h% b $end
$var wire 1 ?% g $end
$var wire 1 i% less $end
$var wire 3 j% op [2:0] $end
$var wire 1 ;% p $end
$var wire 1 6% set $end
$var wire 1 k% result $end
$var wire 1 C% cout $end
$var wire 1 G% cin $end
$var wire 1 l% bmux $end
$scope module bmux2to1 $end
$var wire 1 h% a $end
$var wire 1 m% b $end
$var wire 1 n% s $end
$var wire 1 l% out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 ?% a $end
$var wire 1 ;% b $end
$var wire 1 i% d $end
$var wire 1 o% s0 $end
$var wire 1 p% s1 $end
$var wire 1 k% out $end
$var wire 1 6% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 g% a $end
$var wire 1 l% b $end
$var wire 1 C% cout $end
$var wire 1 6% sum $end
$var wire 1 G% cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 I% C1 $end
$var wire 1 H% C2 $end
$var wire 1 G% C3 $end
$var wire 1 ?$ C4 $end
$var wire 1 J$ G $end
$var wire 1 F$ P $end
$var wire 1 q% cin $end
$var wire 1 B% g0 $end
$var wire 1 A% g1 $end
$var wire 1 @% g2 $end
$var wire 1 ?% g3 $end
$var wire 1 >% p0 $end
$var wire 1 =% p1 $end
$var wire 1 <% p2 $end
$var wire 1 ;% p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 G% cin $end
$var wire 1 ?$ cout $end
$var wire 1 : v $end
$upscope $end
$upscope $end
$scope module alu_2 $end
$var wire 4 r% a [3:0] $end
$var wire 4 s% b [3:0] $end
$var wire 1 M$ cin $end
$var wire 1 ?$ cout $end
$var wire 1 t% less $end
$var wire 3 u% op [2:0] $end
$var wire 1 : overflow $end
$var wire 1 @$ set $end
$var wire 1 v% zero $end
$var wire 1 w% set3 $end
$var wire 1 x% set2 $end
$var wire 1 y% set1 $end
$var wire 1 z% set0 $end
$var wire 4 {% result [3:0] $end
$var wire 1 |% p3 $end
$var wire 1 }% p2 $end
$var wire 1 ~% p1 $end
$var wire 1 !& p0 $end
$var wire 1 "& g3 $end
$var wire 1 #& g2 $end
$var wire 1 $& g1 $end
$var wire 1 %& g0 $end
$var wire 1 && cout3 $end
$var wire 1 '& cout2 $end
$var wire 1 (& cout1 $end
$var wire 1 )& cout0 $end
$var wire 1 E$ P $end
$var wire 1 I$ G $end
$var wire 1 *& C3 $end
$var wire 1 +& C2 $end
$var wire 1 ,& C1 $end
$scope module alu1bit_0 $end
$var wire 1 -& a $end
$var wire 1 .& b $end
$var wire 1 M$ cin $end
$var wire 1 %& g $end
$var wire 1 t% less $end
$var wire 3 /& op [2:0] $end
$var wire 1 !& p $end
$var wire 1 z% set $end
$var wire 1 0& result $end
$var wire 1 )& cout $end
$var wire 1 1& bmux $end
$scope module bmux2to1 $end
$var wire 1 .& a $end
$var wire 1 2& b $end
$var wire 1 3& s $end
$var wire 1 1& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 %& a $end
$var wire 1 !& b $end
$var wire 1 t% d $end
$var wire 1 4& s0 $end
$var wire 1 5& s1 $end
$var wire 1 0& out $end
$var wire 1 z% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 -& a $end
$var wire 1 1& b $end
$var wire 1 M$ cin $end
$var wire 1 )& cout $end
$var wire 1 z% sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 6& a $end
$var wire 1 7& b $end
$var wire 1 $& g $end
$var wire 1 8& less $end
$var wire 3 9& op [2:0] $end
$var wire 1 ~% p $end
$var wire 1 y% set $end
$var wire 1 :& result $end
$var wire 1 (& cout $end
$var wire 1 ,& cin $end
$var wire 1 ;& bmux $end
$scope module bmux2to1 $end
$var wire 1 7& a $end
$var wire 1 <& b $end
$var wire 1 =& s $end
$var wire 1 ;& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 $& a $end
$var wire 1 ~% b $end
$var wire 1 8& d $end
$var wire 1 >& s0 $end
$var wire 1 ?& s1 $end
$var wire 1 :& out $end
$var wire 1 y% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 6& a $end
$var wire 1 ;& b $end
$var wire 1 (& cout $end
$var wire 1 y% sum $end
$var wire 1 ,& cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 @& a $end
$var wire 1 A& b $end
$var wire 1 #& g $end
$var wire 1 B& less $end
$var wire 3 C& op [2:0] $end
$var wire 1 }% p $end
$var wire 1 x% set $end
$var wire 1 D& result $end
$var wire 1 '& cout $end
$var wire 1 +& cin $end
$var wire 1 E& bmux $end
$scope module bmux2to1 $end
$var wire 1 A& a $end
$var wire 1 F& b $end
$var wire 1 G& s $end
$var wire 1 E& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 #& a $end
$var wire 1 }% b $end
$var wire 1 B& d $end
$var wire 1 H& s0 $end
$var wire 1 I& s1 $end
$var wire 1 D& out $end
$var wire 1 x% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 @& a $end
$var wire 1 E& b $end
$var wire 1 '& cout $end
$var wire 1 x% sum $end
$var wire 1 +& cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 J& a $end
$var wire 1 K& b $end
$var wire 1 "& g $end
$var wire 1 L& less $end
$var wire 3 M& op [2:0] $end
$var wire 1 |% p $end
$var wire 1 w% set $end
$var wire 1 N& result $end
$var wire 1 && cout $end
$var wire 1 *& cin $end
$var wire 1 O& bmux $end
$scope module bmux2to1 $end
$var wire 1 K& a $end
$var wire 1 P& b $end
$var wire 1 Q& s $end
$var wire 1 O& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 "& a $end
$var wire 1 |% b $end
$var wire 1 L& d $end
$var wire 1 R& s0 $end
$var wire 1 S& s1 $end
$var wire 1 N& out $end
$var wire 1 w% c $end
$upscope $end
$scope module sumadder $end
$var wire 1 J& a $end
$var wire 1 O& b $end
$var wire 1 && cout $end
$var wire 1 w% sum $end
$var wire 1 *& cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 ,& C1 $end
$var wire 1 +& C2 $end
$var wire 1 *& C3 $end
$var wire 1 ?$ C4 $end
$var wire 1 I$ G $end
$var wire 1 E$ P $end
$var wire 1 T& cin $end
$var wire 1 %& g0 $end
$var wire 1 $& g1 $end
$var wire 1 #& g2 $end
$var wire 1 "& g3 $end
$var wire 1 !& p0 $end
$var wire 1 ~% p1 $end
$var wire 1 }% p2 $end
$var wire 1 |% p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 *& cin $end
$var wire 1 ?$ cout $end
$var wire 1 : v $end
$upscope $end
$upscope $end
$scope module alu_3 $end
$var wire 4 U& a [3:0] $end
$var wire 4 V& b [3:0] $end
$var wire 1 L$ cin $end
$var wire 1 ?$ cout $end
$var wire 1 W& less $end
$var wire 3 X& op [2:0] $end
$var wire 1 : overflow $end
$var wire 1 Y& zero $end
$var wire 1 Z& set3 $end
$var wire 1 [& set2 $end
$var wire 1 \& set1 $end
$var wire 1 ]& set0 $end
$var wire 1 = set $end
$var wire 4 ^& result [3:0] $end
$var wire 1 _& p3 $end
$var wire 1 `& p2 $end
$var wire 1 a& p1 $end
$var wire 1 b& p0 $end
$var wire 1 c& g3 $end
$var wire 1 d& g2 $end
$var wire 1 e& g1 $end
$var wire 1 f& g0 $end
$var wire 1 g& cout3 $end
$var wire 1 h& cout2 $end
$var wire 1 i& cout1 $end
$var wire 1 j& cout0 $end
$var wire 1 D$ P $end
$var wire 1 H$ G $end
$var wire 1 k& C3 $end
$var wire 1 l& C2 $end
$var wire 1 m& C1 $end
$scope module alu1bit_0 $end
$var wire 1 n& a $end
$var wire 1 o& b $end
$var wire 1 L$ cin $end
$var wire 1 f& g $end
$var wire 1 W& less $end
$var wire 3 p& op [2:0] $end
$var wire 1 b& p $end
$var wire 1 ]& set $end
$var wire 1 q& result $end
$var wire 1 j& cout $end
$var wire 1 r& bmux $end
$scope module bmux2to1 $end
$var wire 1 o& a $end
$var wire 1 s& b $end
$var wire 1 t& s $end
$var wire 1 r& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 f& a $end
$var wire 1 b& b $end
$var wire 1 W& d $end
$var wire 1 u& s0 $end
$var wire 1 v& s1 $end
$var wire 1 q& out $end
$var wire 1 ]& c $end
$upscope $end
$scope module sumadder $end
$var wire 1 n& a $end
$var wire 1 r& b $end
$var wire 1 L$ cin $end
$var wire 1 j& cout $end
$var wire 1 ]& sum $end
$upscope $end
$upscope $end
$scope module alu1bit_1 $end
$var wire 1 w& a $end
$var wire 1 x& b $end
$var wire 1 e& g $end
$var wire 1 y& less $end
$var wire 3 z& op [2:0] $end
$var wire 1 a& p $end
$var wire 1 \& set $end
$var wire 1 {& result $end
$var wire 1 i& cout $end
$var wire 1 m& cin $end
$var wire 1 |& bmux $end
$scope module bmux2to1 $end
$var wire 1 x& a $end
$var wire 1 }& b $end
$var wire 1 ~& s $end
$var wire 1 |& out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 e& a $end
$var wire 1 a& b $end
$var wire 1 y& d $end
$var wire 1 !' s0 $end
$var wire 1 "' s1 $end
$var wire 1 {& out $end
$var wire 1 \& c $end
$upscope $end
$scope module sumadder $end
$var wire 1 w& a $end
$var wire 1 |& b $end
$var wire 1 i& cout $end
$var wire 1 \& sum $end
$var wire 1 m& cin $end
$upscope $end
$upscope $end
$scope module alu1bit_2 $end
$var wire 1 #' a $end
$var wire 1 $' b $end
$var wire 1 d& g $end
$var wire 1 %' less $end
$var wire 3 &' op [2:0] $end
$var wire 1 `& p $end
$var wire 1 [& set $end
$var wire 1 '' result $end
$var wire 1 h& cout $end
$var wire 1 l& cin $end
$var wire 1 (' bmux $end
$scope module bmux2to1 $end
$var wire 1 $' a $end
$var wire 1 )' b $end
$var wire 1 *' s $end
$var wire 1 (' out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 d& a $end
$var wire 1 `& b $end
$var wire 1 %' d $end
$var wire 1 +' s0 $end
$var wire 1 ,' s1 $end
$var wire 1 '' out $end
$var wire 1 [& c $end
$upscope $end
$scope module sumadder $end
$var wire 1 #' a $end
$var wire 1 (' b $end
$var wire 1 h& cout $end
$var wire 1 [& sum $end
$var wire 1 l& cin $end
$upscope $end
$upscope $end
$scope module alu1bit_3 $end
$var wire 1 -' a $end
$var wire 1 .' b $end
$var wire 1 c& g $end
$var wire 1 /' less $end
$var wire 3 0' op [2:0] $end
$var wire 1 _& p $end
$var wire 1 Z& set $end
$var wire 1 1' result $end
$var wire 1 g& cout $end
$var wire 1 k& cin $end
$var wire 1 2' bmux $end
$scope module bmux2to1 $end
$var wire 1 .' a $end
$var wire 1 3' b $end
$var wire 1 4' s $end
$var wire 1 2' out $end
$upscope $end
$scope module resultmux4to1 $end
$var wire 1 c& a $end
$var wire 1 _& b $end
$var wire 1 /' d $end
$var wire 1 5' s0 $end
$var wire 1 6' s1 $end
$var wire 1 1' out $end
$var wire 1 Z& c $end
$upscope $end
$scope module sumadder $end
$var wire 1 -' a $end
$var wire 1 2' b $end
$var wire 1 g& cout $end
$var wire 1 Z& sum $end
$var wire 1 k& cin $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 m& C1 $end
$var wire 1 l& C2 $end
$var wire 1 k& C3 $end
$var wire 1 ?$ C4 $end
$var wire 1 H$ G $end
$var wire 1 D$ P $end
$var wire 1 7' cin $end
$var wire 1 f& g0 $end
$var wire 1 e& g1 $end
$var wire 1 d& g2 $end
$var wire 1 c& g3 $end
$var wire 1 b& p0 $end
$var wire 1 a& p1 $end
$var wire 1 `& p2 $end
$var wire 1 _& p3 $end
$upscope $end
$scope module ovrflw $end
$var wire 1 k& cin $end
$var wire 1 ?$ cout $end
$var wire 1 : v $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
07'
06'
z5'
04'
03'
12'
x1'
b0z 0'
0/'
1.'
0-'
0,'
z+'
0*'
0)'
1('
x''
b0z &'
0%'
1$'
0#'
0"'
z!'
0~&
0}&
1|&
x{&
b0z z&
0y&
1x&
0w&
0v&
zu&
0t&
0s&
1r&
xq&
b0z p&
1o&
0n&
0m&
0l&
0k&
xj&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
1b&
1a&
1`&
1_&
bx ^&
x]&
1\&
1[&
1Z&
xY&
b0z X&
0W&
b1111 V&
b0 U&
0T&
0S&
zR&
0Q&
0P&
1O&
xN&
b0z M&
0L&
1K&
0J&
0I&
zH&
0G&
0F&
1E&
xD&
b0z C&
0B&
1A&
0@&
0?&
z>&
0=&
0<&
1;&
x:&
b0z 9&
08&
17&
06&
05&
z4&
03&
02&
11&
x0&
b0z /&
1.&
0-&
0,&
0+&
0*&
x)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
1!&
1~%
1}%
1|%
bx {%
xz%
1y%
1x%
1w%
xv%
b0z u%
0t%
b1111 s%
b0 r%
0q%
0p%
zo%
0n%
0m%
1l%
xk%
b0z j%
0i%
1h%
0g%
0f%
ze%
0d%
0c%
1b%
xa%
b0z `%
0_%
1^%
0]%
0\%
z[%
0Z%
0Y%
1X%
xW%
b0z V%
0U%
1T%
0S%
0R%
zQ%
0P%
0O%
1N%
xM%
b0z L%
1K%
0J%
0I%
0H%
0G%
xF%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
1>%
1=%
1<%
1;%
bx :%
x9%
18%
17%
16%
x5%
b0z 4%
03%
b1111 2%
b0 1%
00%
0/%
z.%
0-%
0,%
1+%
x*%
b0z )%
0(%
1'%
0&%
0%%
z$%
0#%
0"%
1!%
x~$
b0z }$
0|$
1{$
0z$
0y$
zx$
0w$
0v$
1u$
xt$
b0z s$
0r$
1q$
0p$
0o$
zn$
0m$
0l$
1k$
xj$
b0z i$
1h$
0g$
0f$
0e$
0d$
xc$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
1[$
1Z$
1Y$
1X$
bx W$
xV$
1U$
1T$
1S$
xR$
b0z Q$
b1111 P$
b0 O$
xN$
xM$
xL$
0K$
0J$
0I$
0H$
1G$
1F$
1E$
1D$
bx C$
bx B$
b0z A$
x@$
0?$
0>$
b1111111111111111 =$
b0 <$
0;$
0:$
z9$
08$
07$
16$
x5$
b0z 4$
03$
12$
01$
00$
z/$
0.$
0-$
1,$
x+$
b0z *$
0)$
1($
0'$
0&$
z%$
0$$
0#$
1"$
x!$
b0z ~#
0}#
1|#
0{#
0z#
zy#
0x#
0w#
1v#
xu#
b0z t#
1s#
0r#
0q#
0p#
0o#
xn#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
1f#
1e#
1d#
1c#
bx b#
xa#
1`#
1_#
1^#
x]#
b0z \#
0[#
b1111 Z#
b0 Y#
0X#
0W#
zV#
0U#
0T#
1S#
xR#
b0z Q#
0P#
1O#
0N#
0M#
zL#
0K#
0J#
1I#
xH#
b0z G#
0F#
1E#
0D#
0C#
zB#
0A#
0@#
1?#
x>#
b0z =#
0<#
1;#
0:#
09#
z8#
07#
06#
15#
x4#
b0z 3#
12#
01#
00#
0/#
0.#
x-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
1%#
1$#
1##
1"#
bx !#
x~"
1}"
1|"
1{"
xz"
b0z y"
0x"
b1111 w"
b0 v"
0u"
0t"
zs"
0r"
0q"
1p"
xo"
b0z n"
0m"
1l"
0k"
0j"
zi"
0h"
0g"
1f"
xe"
b0z d"
0c"
1b"
0a"
0`"
z_"
0^"
0]"
1\"
x["
b0z Z"
0Y"
1X"
0W"
0V"
zU"
0T"
0S"
1R"
xQ"
b0z P"
1O"
0N"
0M"
0L"
0K"
xJ"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
1B"
1A"
1@"
1?"
bx >"
x="
1<"
1;"
1:"
x9"
b0z 8"
07"
b1111 6"
b0 5"
04"
03"
z2"
01"
00"
1/"
x."
b0z -"
0,"
1+"
0*"
0)"
z("
0'"
0&"
1%"
x$"
b0z #"
0""
1!"
0~
0}
z|
0{
0z
1y
xx
b0z w
0v
1u
0t
0s
zr
0q
0p
1o
xn
b0z m
1l
zk
xj
xi
xh
xg
xf
xe
xd
xc
0b
0a
0`
1_
1^
1]
1\
bx [
xZ
xY
xX
xW
xV
b0z U
b1111 T
b0z S
xR
xQ
xP
xO
0N
0M
0L
1K
1J
1I
1H
bx G
bx F
b0z E
xD
xC
0B
b1111111111111111 A
b0z @
x?
bx >
x=
x<
x;
0:
x9
b0z 8
x7
b11111111111111111111111111111111 6
b0z 5
bx 4
bx 3
b1001 2
bx 1
bx 0
b11111111111111111111111111111111 /
0.
bx -
x,
x+
b11 *
b11111111111111111111111111111111 )
b1000 (
b1001 '
b0 &
b10 %
b1101 $
b1000 #
b100 "
1!
$end
#10
b11 4
b0 1
b1000 0
0!
#20
1!
#30
0!
#40
1!
